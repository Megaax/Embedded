
ADC_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e20  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001e20  00001e94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001950  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000115c  00000000  00000000  000037ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004948  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006841  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000772c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000084dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000863c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000088c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009097  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <main>
      7a:	0c 94 0e 0f 	jmp	0x1e1c	; 0x1e1c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 f3 0e 	jmp	0x1de6	; 0x1de6 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_voidInitialization>:
#undef F_CPU
#define F_CPU 16000000


void LCD_voidInitialization(void)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c4 55       	subi	r28, 0x54	; 84
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
//	_delay_ms(50);
	LCD_u8DataDir = 0xFF;
     b50:	ea e3       	ldi	r30, 0x3A	; 58
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	80 83       	st	Z, r24
	LCD_u8ControlDir |= (1<<LCD_u8RegisterSelPin)
     b58:	a7 e3       	ldi	r26, 0x37	; 55
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e7 e3       	ldi	r30, 0x37	; 55
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	87 60       	ori	r24, 0x07	; 7
     b64:	8c 93       	st	X, r24
     b66:	fe 01       	movw	r30, r28
     b68:	ef 5a       	subi	r30, 0xAF	; 175
     b6a:	ff 4f       	sbci	r31, 0xFF	; 255
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a8 ec       	ldi	r26, 0xC8	; 200
     b72:	b2 e4       	ldi	r27, 0x42	; 66
     b74:	80 83       	st	Z, r24
     b76:	91 83       	std	Z+1, r25	; 0x01
     b78:	a2 83       	std	Z+2, r26	; 0x02
     b7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7c:	8e 01       	movw	r16, r28
     b7e:	03 5b       	subi	r16, 0xB3	; 179
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	fe 01       	movw	r30, r28
     b84:	ef 5a       	subi	r30, 0xAF	; 175
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	60 81       	ld	r22, Z
     b8a:	71 81       	ldd	r23, Z+1	; 0x01
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	93 81       	ldd	r25, Z+3	; 0x03
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	4a e7       	ldi	r20, 0x7A	; 122
     b96:	55 e4       	ldi	r21, 0x45	; 69
     b98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b9c:	dc 01       	movw	r26, r24
     b9e:	cb 01       	movw	r24, r22
     ba0:	f8 01       	movw	r30, r16
     ba2:	80 83       	st	Z, r24
     ba4:	91 83       	std	Z+1, r25	; 0x01
     ba6:	a2 83       	std	Z+2, r26	; 0x02
     ba8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     baa:	fe 01       	movw	r30, r28
     bac:	e3 5b       	subi	r30, 0xB3	; 179
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	60 81       	ld	r22, Z
     bb2:	71 81       	ldd	r23, Z+1	; 0x01
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e8       	ldi	r20, 0x80	; 128
     bbe:	5f e3       	ldi	r21, 0x3F	; 63
     bc0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bc4:	88 23       	and	r24, r24
     bc6:	44 f4       	brge	.+16     	; 0xbd8 <LCD_voidInitialization+0xa2>
		__ticks = 1;
     bc8:	fe 01       	movw	r30, r28
     bca:	e5 5b       	subi	r30, 0xB5	; 181
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	91 83       	std	Z+1, r25	; 0x01
     bd4:	80 83       	st	Z, r24
     bd6:	64 c0       	rjmp	.+200    	; 0xca0 <LCD_voidInitialization+0x16a>
	else if (__tmp > 65535)
     bd8:	fe 01       	movw	r30, r28
     bda:	e3 5b       	subi	r30, 0xB3	; 179
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	3f ef       	ldi	r19, 0xFF	; 255
     bea:	4f e7       	ldi	r20, 0x7F	; 127
     bec:	57 e4       	ldi	r21, 0x47	; 71
     bee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bf2:	18 16       	cp	r1, r24
     bf4:	0c f0       	brlt	.+2      	; 0xbf8 <LCD_voidInitialization+0xc2>
     bf6:	43 c0       	rjmp	.+134    	; 0xc7e <LCD_voidInitialization+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf8:	fe 01       	movw	r30, r28
     bfa:	ef 5a       	subi	r30, 0xAF	; 175
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	60 81       	ld	r22, Z
     c00:	71 81       	ldd	r23, Z+1	; 0x01
     c02:	82 81       	ldd	r24, Z+2	; 0x02
     c04:	93 81       	ldd	r25, Z+3	; 0x03
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	40 e2       	ldi	r20, 0x20	; 32
     c0c:	51 e4       	ldi	r21, 0x41	; 65
     c0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c12:	dc 01       	movw	r26, r24
     c14:	cb 01       	movw	r24, r22
     c16:	8e 01       	movw	r16, r28
     c18:	05 5b       	subi	r16, 0xB5	; 181
     c1a:	1f 4f       	sbci	r17, 0xFF	; 255
     c1c:	bc 01       	movw	r22, r24
     c1e:	cd 01       	movw	r24, r26
     c20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c24:	dc 01       	movw	r26, r24
     c26:	cb 01       	movw	r24, r22
     c28:	f8 01       	movw	r30, r16
     c2a:	91 83       	std	Z+1, r25	; 0x01
     c2c:	80 83       	st	Z, r24
     c2e:	1f c0       	rjmp	.+62     	; 0xc6e <LCD_voidInitialization+0x138>
     c30:	fe 01       	movw	r30, r28
     c32:	e7 5b       	subi	r30, 0xB7	; 183
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	80 e9       	ldi	r24, 0x90	; 144
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	91 83       	std	Z+1, r25	; 0x01
     c3c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3e:	fe 01       	movw	r30, r28
     c40:	e7 5b       	subi	r30, 0xB7	; 183
     c42:	ff 4f       	sbci	r31, 0xFF	; 255
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	f1 f7       	brne	.-4      	; 0xc48 <LCD_voidInitialization+0x112>
     c4c:	fe 01       	movw	r30, r28
     c4e:	e7 5b       	subi	r30, 0xB7	; 183
     c50:	ff 4f       	sbci	r31, 0xFF	; 255
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c56:	de 01       	movw	r26, r28
     c58:	a5 5b       	subi	r26, 0xB5	; 181
     c5a:	bf 4f       	sbci	r27, 0xFF	; 255
     c5c:	fe 01       	movw	r30, r28
     c5e:	e5 5b       	subi	r30, 0xB5	; 181
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	80 81       	ld	r24, Z
     c64:	91 81       	ldd	r25, Z+1	; 0x01
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6e:	fe 01       	movw	r30, r28
     c70:	e5 5b       	subi	r30, 0xB5	; 181
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 81       	ld	r24, Z
     c76:	91 81       	ldd	r25, Z+1	; 0x01
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	d1 f6       	brne	.-76     	; 0xc30 <LCD_voidInitialization+0xfa>
     c7c:	27 c0       	rjmp	.+78     	; 0xccc <LCD_voidInitialization+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c7e:	8e 01       	movw	r16, r28
     c80:	05 5b       	subi	r16, 0xB5	; 181
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	fe 01       	movw	r30, r28
     c86:	e3 5b       	subi	r30, 0xB3	; 179
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	f8 01       	movw	r30, r16
     c9c:	91 83       	std	Z+1, r25	; 0x01
     c9e:	80 83       	st	Z, r24
     ca0:	de 01       	movw	r26, r28
     ca2:	a9 5b       	subi	r26, 0xB9	; 185
     ca4:	bf 4f       	sbci	r27, 0xFF	; 255
     ca6:	fe 01       	movw	r30, r28
     ca8:	e5 5b       	subi	r30, 0xB5	; 181
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	8d 93       	st	X+, r24
     cb2:	9c 93       	st	X, r25
     cb4:	fe 01       	movw	r30, r28
     cb6:	e9 5b       	subi	r30, 0xB9	; 185
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <LCD_voidInitialization+0x188>
     cc2:	fe 01       	movw	r30, r28
     cc4:	e9 5b       	subi	r30, 0xB9	; 185
     cc6:	ff 4f       	sbci	r31, 0xFF	; 255
     cc8:	91 83       	std	Z+1, r25	; 0x01
     cca:	80 83       	st	Z, r24
	|(1<<LCD_u8ReadWritePin)|(1<<LCD_u8EnablePin);
	_delay_ms(100);
	LCD_voidWriteCommand(LCD_u8ComReturnHome);
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	0e 94 ce 08 	call	0x119c	; 0x119c <LCD_voidWriteCommand>
     cd2:	fe 01       	movw	r30, r28
     cd4:	ed 5b       	subi	r30, 0xBD	; 189
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e2       	ldi	r26, 0x20	; 32
     cde:	b1 e4       	ldi	r27, 0x41	; 65
     ce0:	80 83       	st	Z, r24
     ce2:	91 83       	std	Z+1, r25	; 0x01
     ce4:	a2 83       	std	Z+2, r26	; 0x02
     ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce8:	8e 01       	movw	r16, r28
     cea:	01 5c       	subi	r16, 0xC1	; 193
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	fe 01       	movw	r30, r28
     cf0:	ed 5b       	subi	r30, 0xBD	; 189
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	60 81       	ld	r22, Z
     cf6:	71 81       	ldd	r23, Z+1	; 0x01
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	4a e7       	ldi	r20, 0x7A	; 122
     d02:	55 e4       	ldi	r21, 0x45	; 69
     d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	f8 01       	movw	r30, r16
     d0e:	80 83       	st	Z, r24
     d10:	91 83       	std	Z+1, r25	; 0x01
     d12:	a2 83       	std	Z+2, r26	; 0x02
     d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d16:	fe 01       	movw	r30, r28
     d18:	ff 96       	adiw	r30, 0x3f	; 63
     d1a:	60 81       	ld	r22, Z
     d1c:	71 81       	ldd	r23, Z+1	; 0x01
     d1e:	82 81       	ldd	r24, Z+2	; 0x02
     d20:	93 81       	ldd	r25, Z+3	; 0x03
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e8       	ldi	r20, 0x80	; 128
     d28:	5f e3       	ldi	r21, 0x3F	; 63
     d2a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d2e:	88 23       	and	r24, r24
     d30:	2c f4       	brge	.+10     	; 0xd3c <LCD_voidInitialization+0x206>
		__ticks = 1;
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	9e af       	std	Y+62, r25	; 0x3e
     d38:	8d af       	std	Y+61, r24	; 0x3d
     d3a:	46 c0       	rjmp	.+140    	; 0xdc8 <LCD_voidInitialization+0x292>
	else if (__tmp > 65535)
     d3c:	fe 01       	movw	r30, r28
     d3e:	ff 96       	adiw	r30, 0x3f	; 63
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	3f ef       	ldi	r19, 0xFF	; 255
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	64 f5       	brge	.+88     	; 0xdb0 <LCD_voidInitialization+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d58:	fe 01       	movw	r30, r28
     d5a:	ed 5b       	subi	r30, 0xBD	; 189
     d5c:	ff 4f       	sbci	r31, 0xFF	; 255
     d5e:	60 81       	ld	r22, Z
     d60:	71 81       	ldd	r23, Z+1	; 0x01
     d62:	82 81       	ldd	r24, Z+2	; 0x02
     d64:	93 81       	ldd	r25, Z+3	; 0x03
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	40 e2       	ldi	r20, 0x20	; 32
     d6c:	51 e4       	ldi	r21, 0x41	; 65
     d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	9e af       	std	Y+62, r25	; 0x3e
     d84:	8d af       	std	Y+61, r24	; 0x3d
     d86:	0f c0       	rjmp	.+30     	; 0xda6 <LCD_voidInitialization+0x270>
     d88:	80 e9       	ldi	r24, 0x90	; 144
     d8a:	91 e0       	ldi	r25, 0x01	; 1
     d8c:	9c af       	std	Y+60, r25	; 0x3c
     d8e:	8b af       	std	Y+59, r24	; 0x3b
     d90:	8b ad       	ldd	r24, Y+59	; 0x3b
     d92:	9c ad       	ldd	r25, Y+60	; 0x3c
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <LCD_voidInitialization+0x25e>
     d98:	9c af       	std	Y+60, r25	; 0x3c
     d9a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d9c:	8d ad       	ldd	r24, Y+61	; 0x3d
     d9e:	9e ad       	ldd	r25, Y+62	; 0x3e
     da0:	01 97       	sbiw	r24, 0x01	; 1
     da2:	9e af       	std	Y+62, r25	; 0x3e
     da4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da6:	8d ad       	ldd	r24, Y+61	; 0x3d
     da8:	9e ad       	ldd	r25, Y+62	; 0x3e
     daa:	00 97       	sbiw	r24, 0x00	; 0
     dac:	69 f7       	brne	.-38     	; 0xd88 <LCD_voidInitialization+0x252>
     dae:	16 c0       	rjmp	.+44     	; 0xddc <LCD_voidInitialization+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     db0:	fe 01       	movw	r30, r28
     db2:	ff 96       	adiw	r30, 0x3f	; 63
     db4:	60 81       	ld	r22, Z
     db6:	71 81       	ldd	r23, Z+1	; 0x01
     db8:	82 81       	ldd	r24, Z+2	; 0x02
     dba:	93 81       	ldd	r25, Z+3	; 0x03
     dbc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dc0:	dc 01       	movw	r26, r24
     dc2:	cb 01       	movw	r24, r22
     dc4:	9e af       	std	Y+62, r25	; 0x3e
     dc6:	8d af       	std	Y+61, r24	; 0x3d
     dc8:	8d ad       	ldd	r24, Y+61	; 0x3d
     dca:	9e ad       	ldd	r25, Y+62	; 0x3e
     dcc:	9a af       	std	Y+58, r25	; 0x3a
     dce:	89 af       	std	Y+57, r24	; 0x39
     dd0:	89 ad       	ldd	r24, Y+57	; 0x39
     dd2:	9a ad       	ldd	r25, Y+58	; 0x3a
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	f1 f7       	brne	.-4      	; 0xdd4 <LCD_voidInitialization+0x29e>
     dd8:	9a af       	std	Y+58, r25	; 0x3a
     dda:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(10);
	LCD_voidWriteCommand(LCD_u8Com8bit_2Line);
     ddc:	88 e3       	ldi	r24, 0x38	; 56
     dde:	0e 94 ce 08 	call	0x119c	; 0x119c <LCD_voidWriteCommand>
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	a0 e2       	ldi	r26, 0x20	; 32
     de8:	b1 e4       	ldi	r27, 0x41	; 65
     dea:	8d ab       	std	Y+53, r24	; 0x35
     dec:	9e ab       	std	Y+54, r25	; 0x36
     dee:	af ab       	std	Y+55, r26	; 0x37
     df0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df2:	6d a9       	ldd	r22, Y+53	; 0x35
     df4:	7e a9       	ldd	r23, Y+54	; 0x36
     df6:	8f a9       	ldd	r24, Y+55	; 0x37
     df8:	98 ad       	ldd	r25, Y+56	; 0x38
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	4a e7       	ldi	r20, 0x7A	; 122
     e00:	55 e4       	ldi	r21, 0x45	; 69
     e02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e06:	dc 01       	movw	r26, r24
     e08:	cb 01       	movw	r24, r22
     e0a:	89 ab       	std	Y+49, r24	; 0x31
     e0c:	9a ab       	std	Y+50, r25	; 0x32
     e0e:	ab ab       	std	Y+51, r26	; 0x33
     e10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e12:	69 a9       	ldd	r22, Y+49	; 0x31
     e14:	7a a9       	ldd	r23, Y+50	; 0x32
     e16:	8b a9       	ldd	r24, Y+51	; 0x33
     e18:	9c a9       	ldd	r25, Y+52	; 0x34
     e1a:	20 e0       	ldi	r18, 0x00	; 0
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	40 e8       	ldi	r20, 0x80	; 128
     e20:	5f e3       	ldi	r21, 0x3F	; 63
     e22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e26:	88 23       	and	r24, r24
     e28:	2c f4       	brge	.+10     	; 0xe34 <LCD_voidInitialization+0x2fe>
		__ticks = 1;
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	98 ab       	std	Y+48, r25	; 0x30
     e30:	8f a7       	std	Y+47, r24	; 0x2f
     e32:	3f c0       	rjmp	.+126    	; 0xeb2 <LCD_voidInitialization+0x37c>
	else if (__tmp > 65535)
     e34:	69 a9       	ldd	r22, Y+49	; 0x31
     e36:	7a a9       	ldd	r23, Y+50	; 0x32
     e38:	8b a9       	ldd	r24, Y+51	; 0x33
     e3a:	9c a9       	ldd	r25, Y+52	; 0x34
     e3c:	20 e0       	ldi	r18, 0x00	; 0
     e3e:	3f ef       	ldi	r19, 0xFF	; 255
     e40:	4f e7       	ldi	r20, 0x7F	; 127
     e42:	57 e4       	ldi	r21, 0x47	; 71
     e44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e48:	18 16       	cp	r1, r24
     e4a:	4c f5       	brge	.+82     	; 0xe9e <LCD_voidInitialization+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4c:	6d a9       	ldd	r22, Y+53	; 0x35
     e4e:	7e a9       	ldd	r23, Y+54	; 0x36
     e50:	8f a9       	ldd	r24, Y+55	; 0x37
     e52:	98 ad       	ldd	r25, Y+56	; 0x38
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	98 ab       	std	Y+48, r25	; 0x30
     e72:	8f a7       	std	Y+47, r24	; 0x2f
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <LCD_voidInitialization+0x35e>
     e76:	80 e9       	ldi	r24, 0x90	; 144
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	9e a7       	std	Y+46, r25	; 0x2e
     e7c:	8d a7       	std	Y+45, r24	; 0x2d
     e7e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e80:	9e a5       	ldd	r25, Y+46	; 0x2e
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <LCD_voidInitialization+0x34c>
     e86:	9e a7       	std	Y+46, r25	; 0x2e
     e88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e8c:	98 a9       	ldd	r25, Y+48	; 0x30
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	98 ab       	std	Y+48, r25	; 0x30
     e92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	8f a5       	ldd	r24, Y+47	; 0x2f
     e96:	98 a9       	ldd	r25, Y+48	; 0x30
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	69 f7       	brne	.-38     	; 0xe76 <LCD_voidInitialization+0x340>
     e9c:	14 c0       	rjmp	.+40     	; 0xec6 <LCD_voidInitialization+0x390>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	69 a9       	ldd	r22, Y+49	; 0x31
     ea0:	7a a9       	ldd	r23, Y+50	; 0x32
     ea2:	8b a9       	ldd	r24, Y+51	; 0x33
     ea4:	9c a9       	ldd	r25, Y+52	; 0x34
     ea6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	98 ab       	std	Y+48, r25	; 0x30
     eb0:	8f a7       	std	Y+47, r24	; 0x2f
     eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
     eb4:	98 a9       	ldd	r25, Y+48	; 0x30
     eb6:	9c a7       	std	Y+44, r25	; 0x2c
     eb8:	8b a7       	std	Y+43, r24	; 0x2b
     eba:	8b a5       	ldd	r24, Y+43	; 0x2b
     ebc:	9c a5       	ldd	r25, Y+44	; 0x2c
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <LCD_voidInitialization+0x388>
     ec2:	9c a7       	std	Y+44, r25	; 0x2c
     ec4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_voidWriteCommand(LCD_u8ComDispOn);
     ec6:	8c e0       	ldi	r24, 0x0C	; 12
     ec8:	0e 94 ce 08 	call	0x119c	; 0x119c <LCD_voidWriteCommand>
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	a0 e2       	ldi	r26, 0x20	; 32
     ed2:	b1 e4       	ldi	r27, 0x41	; 65
     ed4:	8f a3       	std	Y+39, r24	; 0x27
     ed6:	98 a7       	std	Y+40, r25	; 0x28
     ed8:	a9 a7       	std	Y+41, r26	; 0x29
     eda:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     edc:	6f a1       	ldd	r22, Y+39	; 0x27
     ede:	78 a5       	ldd	r23, Y+40	; 0x28
     ee0:	89 a5       	ldd	r24, Y+41	; 0x29
     ee2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	4a e7       	ldi	r20, 0x7A	; 122
     eea:	55 e4       	ldi	r21, 0x45	; 69
     eec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	8b a3       	std	Y+35, r24	; 0x23
     ef6:	9c a3       	std	Y+36, r25	; 0x24
     ef8:	ad a3       	std	Y+37, r26	; 0x25
     efa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     efc:	6b a1       	ldd	r22, Y+35	; 0x23
     efe:	7c a1       	ldd	r23, Y+36	; 0x24
     f00:	8d a1       	ldd	r24, Y+37	; 0x25
     f02:	9e a1       	ldd	r25, Y+38	; 0x26
     f04:	20 e0       	ldi	r18, 0x00	; 0
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	40 e8       	ldi	r20, 0x80	; 128
     f0a:	5f e3       	ldi	r21, 0x3F	; 63
     f0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f10:	88 23       	and	r24, r24
     f12:	2c f4       	brge	.+10     	; 0xf1e <LCD_voidInitialization+0x3e8>
		__ticks = 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9a a3       	std	Y+34, r25	; 0x22
     f1a:	89 a3       	std	Y+33, r24	; 0x21
     f1c:	3f c0       	rjmp	.+126    	; 0xf9c <LCD_voidInitialization+0x466>
	else if (__tmp > 65535)
     f1e:	6b a1       	ldd	r22, Y+35	; 0x23
     f20:	7c a1       	ldd	r23, Y+36	; 0x24
     f22:	8d a1       	ldd	r24, Y+37	; 0x25
     f24:	9e a1       	ldd	r25, Y+38	; 0x26
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	3f ef       	ldi	r19, 0xFF	; 255
     f2a:	4f e7       	ldi	r20, 0x7F	; 127
     f2c:	57 e4       	ldi	r21, 0x47	; 71
     f2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f32:	18 16       	cp	r1, r24
     f34:	4c f5       	brge	.+82     	; 0xf88 <LCD_voidInitialization+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f36:	6f a1       	ldd	r22, Y+39	; 0x27
     f38:	78 a5       	ldd	r23, Y+40	; 0x28
     f3a:	89 a5       	ldd	r24, Y+41	; 0x29
     f3c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e2       	ldi	r20, 0x20	; 32
     f44:	51 e4       	ldi	r21, 0x41	; 65
     f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	bc 01       	movw	r22, r24
     f50:	cd 01       	movw	r24, r26
     f52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	9a a3       	std	Y+34, r25	; 0x22
     f5c:	89 a3       	std	Y+33, r24	; 0x21
     f5e:	0f c0       	rjmp	.+30     	; 0xf7e <LCD_voidInitialization+0x448>
     f60:	80 e9       	ldi	r24, 0x90	; 144
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	98 a3       	std	Y+32, r25	; 0x20
     f66:	8f 8f       	std	Y+31, r24	; 0x1f
     f68:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f6a:	98 a1       	ldd	r25, Y+32	; 0x20
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	f1 f7       	brne	.-4      	; 0xf6c <LCD_voidInitialization+0x436>
     f70:	98 a3       	std	Y+32, r25	; 0x20
     f72:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f74:	89 a1       	ldd	r24, Y+33	; 0x21
     f76:	9a a1       	ldd	r25, Y+34	; 0x22
     f78:	01 97       	sbiw	r24, 0x01	; 1
     f7a:	9a a3       	std	Y+34, r25	; 0x22
     f7c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f7e:	89 a1       	ldd	r24, Y+33	; 0x21
     f80:	9a a1       	ldd	r25, Y+34	; 0x22
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	69 f7       	brne	.-38     	; 0xf60 <LCD_voidInitialization+0x42a>
     f86:	14 c0       	rjmp	.+40     	; 0xfb0 <LCD_voidInitialization+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f88:	6b a1       	ldd	r22, Y+35	; 0x23
     f8a:	7c a1       	ldd	r23, Y+36	; 0x24
     f8c:	8d a1       	ldd	r24, Y+37	; 0x25
     f8e:	9e a1       	ldd	r25, Y+38	; 0x26
     f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	9a a3       	std	Y+34, r25	; 0x22
     f9a:	89 a3       	std	Y+33, r24	; 0x21
     f9c:	89 a1       	ldd	r24, Y+33	; 0x21
     f9e:	9a a1       	ldd	r25, Y+34	; 0x22
     fa0:	9e 8f       	std	Y+30, r25	; 0x1e
     fa2:	8d 8f       	std	Y+29, r24	; 0x1d
     fa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa6:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <LCD_voidInitialization+0x472>
     fac:	9e 8f       	std	Y+30, r25	; 0x1e
     fae:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_voidWriteCommand(LCD_u8ComClearScreen);
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	0e 94 ce 08 	call	0x119c	; 0x119c <LCD_voidWriteCommand>
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	a0 e2       	ldi	r26, 0x20	; 32
     fbc:	b1 e4       	ldi	r27, 0x41	; 65
     fbe:	89 8f       	std	Y+25, r24	; 0x19
     fc0:	9a 8f       	std	Y+26, r25	; 0x1a
     fc2:	ab 8f       	std	Y+27, r26	; 0x1b
     fc4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fc6:	69 8d       	ldd	r22, Y+25	; 0x19
     fc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a e7       	ldi	r20, 0x7A	; 122
     fd4:	55 e4       	ldi	r21, 0x45	; 69
     fd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8d 8b       	std	Y+21, r24	; 0x15
     fe0:	9e 8b       	std	Y+22, r25	; 0x16
     fe2:	af 8b       	std	Y+23, r26	; 0x17
     fe4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fe6:	6d 89       	ldd	r22, Y+21	; 0x15
     fe8:	7e 89       	ldd	r23, Y+22	; 0x16
     fea:	8f 89       	ldd	r24, Y+23	; 0x17
     fec:	98 8d       	ldd	r25, Y+24	; 0x18
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e8       	ldi	r20, 0x80	; 128
     ff4:	5f e3       	ldi	r21, 0x3F	; 63
     ff6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     ffa:	88 23       	and	r24, r24
     ffc:	2c f4       	brge	.+10     	; 0x1008 <LCD_voidInitialization+0x4d2>
		__ticks = 1;
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	9c 8b       	std	Y+20, r25	; 0x14
    1004:	8b 8b       	std	Y+19, r24	; 0x13
    1006:	3f c0       	rjmp	.+126    	; 0x1086 <LCD_voidInitialization+0x550>
	else if (__tmp > 65535)
    1008:	6d 89       	ldd	r22, Y+21	; 0x15
    100a:	7e 89       	ldd	r23, Y+22	; 0x16
    100c:	8f 89       	ldd	r24, Y+23	; 0x17
    100e:	98 8d       	ldd	r25, Y+24	; 0x18
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	3f ef       	ldi	r19, 0xFF	; 255
    1014:	4f e7       	ldi	r20, 0x7F	; 127
    1016:	57 e4       	ldi	r21, 0x47	; 71
    1018:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    101c:	18 16       	cp	r1, r24
    101e:	4c f5       	brge	.+82     	; 0x1072 <LCD_voidInitialization+0x53c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1020:	69 8d       	ldd	r22, Y+25	; 0x19
    1022:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1024:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1026:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	40 e2       	ldi	r20, 0x20	; 32
    102e:	51 e4       	ldi	r21, 0x41	; 65
    1030:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	bc 01       	movw	r22, r24
    103a:	cd 01       	movw	r24, r26
    103c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9c 8b       	std	Y+20, r25	; 0x14
    1046:	8b 8b       	std	Y+19, r24	; 0x13
    1048:	0f c0       	rjmp	.+30     	; 0x1068 <LCD_voidInitialization+0x532>
    104a:	80 e9       	ldi	r24, 0x90	; 144
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	9a 8b       	std	Y+18, r25	; 0x12
    1050:	89 8b       	std	Y+17, r24	; 0x11
    1052:	89 89       	ldd	r24, Y+17	; 0x11
    1054:	9a 89       	ldd	r25, Y+18	; 0x12
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <LCD_voidInitialization+0x520>
    105a:	9a 8b       	std	Y+18, r25	; 0x12
    105c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    105e:	8b 89       	ldd	r24, Y+19	; 0x13
    1060:	9c 89       	ldd	r25, Y+20	; 0x14
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9c 8b       	std	Y+20, r25	; 0x14
    1066:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f7       	brne	.-38     	; 0x104a <LCD_voidInitialization+0x514>
    1070:	14 c0       	rjmp	.+40     	; 0x109a <LCD_voidInitialization+0x564>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1072:	6d 89       	ldd	r22, Y+21	; 0x15
    1074:	7e 89       	ldd	r23, Y+22	; 0x16
    1076:	8f 89       	ldd	r24, Y+23	; 0x17
    1078:	98 8d       	ldd	r25, Y+24	; 0x18
    107a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    107e:	dc 01       	movw	r26, r24
    1080:	cb 01       	movw	r24, r22
    1082:	9c 8b       	std	Y+20, r25	; 0x14
    1084:	8b 8b       	std	Y+19, r24	; 0x13
    1086:	8b 89       	ldd	r24, Y+19	; 0x13
    1088:	9c 89       	ldd	r25, Y+20	; 0x14
    108a:	98 8b       	std	Y+16, r25	; 0x10
    108c:	8f 87       	std	Y+15, r24	; 0x0f
    108e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1090:	98 89       	ldd	r25, Y+16	; 0x10
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <LCD_voidInitialization+0x55c>
    1096:	98 8b       	std	Y+16, r25	; 0x10
    1098:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_voidWriteCommand(LCD_u8ComEntryMode);
    109a:	86 e0       	ldi	r24, 0x06	; 6
    109c:	0e 94 ce 08 	call	0x119c	; 0x119c <LCD_voidWriteCommand>
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	a0 e2       	ldi	r26, 0x20	; 32
    10a6:	b1 e4       	ldi	r27, 0x41	; 65
    10a8:	8b 87       	std	Y+11, r24	; 0x0b
    10aa:	9c 87       	std	Y+12, r25	; 0x0c
    10ac:	ad 87       	std	Y+13, r26	; 0x0d
    10ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	4a e7       	ldi	r20, 0x7A	; 122
    10be:	55 e4       	ldi	r21, 0x45	; 69
    10c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10c4:	dc 01       	movw	r26, r24
    10c6:	cb 01       	movw	r24, r22
    10c8:	8f 83       	std	Y+7, r24	; 0x07
    10ca:	98 87       	std	Y+8, r25	; 0x08
    10cc:	a9 87       	std	Y+9, r26	; 0x09
    10ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10d0:	6f 81       	ldd	r22, Y+7	; 0x07
    10d2:	78 85       	ldd	r23, Y+8	; 0x08
    10d4:	89 85       	ldd	r24, Y+9	; 0x09
    10d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	40 e8       	ldi	r20, 0x80	; 128
    10de:	5f e3       	ldi	r21, 0x3F	; 63
    10e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	2c f4       	brge	.+10     	; 0x10f2 <LCD_voidInitialization+0x5bc>
		__ticks = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	9e 83       	std	Y+6, r25	; 0x06
    10ee:	8d 83       	std	Y+5, r24	; 0x05
    10f0:	3f c0       	rjmp	.+126    	; 0x1170 <LCD_voidInitialization+0x63a>
	else if (__tmp > 65535)
    10f2:	6f 81       	ldd	r22, Y+7	; 0x07
    10f4:	78 85       	ldd	r23, Y+8	; 0x08
    10f6:	89 85       	ldd	r24, Y+9	; 0x09
    10f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	3f ef       	ldi	r19, 0xFF	; 255
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	57 e4       	ldi	r21, 0x47	; 71
    1102:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	4c f5       	brge	.+82     	; 0x115c <LCD_voidInitialization+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110a:	6b 85       	ldd	r22, Y+11	; 0x0b
    110c:	7c 85       	ldd	r23, Y+12	; 0x0c
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e2       	ldi	r20, 0x20	; 32
    1118:	51 e4       	ldi	r21, 0x41	; 65
    111a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    112a:	dc 01       	movw	r26, r24
    112c:	cb 01       	movw	r24, r22
    112e:	9e 83       	std	Y+6, r25	; 0x06
    1130:	8d 83       	std	Y+5, r24	; 0x05
    1132:	0f c0       	rjmp	.+30     	; 0x1152 <LCD_voidInitialization+0x61c>
    1134:	80 e9       	ldi	r24, 0x90	; 144
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	8b 83       	std	Y+3, r24	; 0x03
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <LCD_voidInitialization+0x60a>
    1144:	9c 83       	std	Y+4, r25	; 0x04
    1146:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1148:	8d 81       	ldd	r24, Y+5	; 0x05
    114a:	9e 81       	ldd	r25, Y+6	; 0x06
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	9e 83       	std	Y+6, r25	; 0x06
    1150:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	69 f7       	brne	.-38     	; 0x1134 <LCD_voidInitialization+0x5fe>
    115a:	14 c0       	rjmp	.+40     	; 0x1184 <LCD_voidInitialization+0x64e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115c:	6f 81       	ldd	r22, Y+7	; 0x07
    115e:	78 85       	ldd	r23, Y+8	; 0x08
    1160:	89 85       	ldd	r24, Y+9	; 0x09
    1162:	9a 85       	ldd	r25, Y+10	; 0x0a
    1164:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
    1178:	89 81       	ldd	r24, Y+1	; 0x01
    117a:	9a 81       	ldd	r25, Y+2	; 0x02
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <LCD_voidInitialization+0x646>
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(10);
}
    1184:	cc 5a       	subi	r28, 0xAC	; 172
    1186:	df 4f       	sbci	r29, 0xFF	; 255
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	cf 91       	pop	r28
    1194:	df 91       	pop	r29
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	08 95       	ret

0000119c <LCD_voidWriteCommand>:

void LCD_voidWriteCommand(u8 Copy_u8Command)
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	0f 92       	push	r0
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	89 83       	std	Y+1, r24	; 0x01
	LCD_u8ControlPort &= ~((1<<LCD_u8RegisterSelPin)
    11a8:	a8 e3       	ldi	r26, 0x38	; 56
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e8 e3       	ldi	r30, 0x38	; 56
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8c 7f       	andi	r24, 0xFC	; 252
    11b4:	8c 93       	st	X, r24
			|(1<<LCD_u8ReadWritePin));
	LCD_u8DataPort = Copy_u8Command;
    11b6:	eb e3       	ldi	r30, 0x3B	; 59
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	80 83       	st	Z, r24
	LCD_voidWakeUp();
    11be:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_voidWakeUp>
}
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <LCD_voidWriteChar>:



void LCD_voidWriteChar( u8 Copy_u8Char)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01

	LCD_u8ControlPort &= (~(1<<LCD_u8ReadWritePin));
    11d6:	a8 e3       	ldi	r26, 0x38	; 56
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e3       	ldi	r30, 0x38	; 56
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8d 7f       	andi	r24, 0xFD	; 253
    11e2:	8c 93       	st	X, r24
	LCD_u8ControlPort|=(1<<LCD_u8RegisterSelPin);
    11e4:	a8 e3       	ldi	r26, 0x38	; 56
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e8 e3       	ldi	r30, 0x38	; 56
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	8c 93       	st	X, r24
	LCD_u8DataPort = Copy_u8Char;
    11f2:	eb e3       	ldi	r30, 0x3B	; 59
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	80 83       	st	Z, r24
	LCD_voidWakeUp();
    11fa:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_voidWakeUp>
}
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <LCD_voidGotoXY>:

void LCD_voidGotoXY(u8 Copy_u8Xpos , u8 Copy_u8Ypos)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <LCD_voidGotoXY+0x6>
    120c:	00 d0       	rcall	.+0      	; 0x120e <LCD_voidGotoXY+0x8>
    120e:	0f 92       	push	r0
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	8a 83       	std	Y+2, r24	; 0x02
    1216:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ActualAdd;
	switch(Copy_u8Ypos)
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3d 83       	std	Y+5, r19	; 0x05
    1220:	2c 83       	std	Y+4, r18	; 0x04
    1222:	8c 81       	ldd	r24, Y+4	; 0x04
    1224:	9d 81       	ldd	r25, Y+5	; 0x05
    1226:	00 97       	sbiw	r24, 0x00	; 0
    1228:	31 f0       	breq	.+12     	; 0x1236 <LCD_voidGotoXY+0x30>
    122a:	2c 81       	ldd	r18, Y+4	; 0x04
    122c:	3d 81       	ldd	r19, Y+5	; 0x05
    122e:	21 30       	cpi	r18, 0x01	; 1
    1230:	31 05       	cpc	r19, r1
    1232:	41 f0       	breq	.+16     	; 0x1244 <LCD_voidGotoXY+0x3e>
    1234:	0d c0       	rjmp	.+26     	; 0x1250 <LCD_voidGotoXY+0x4a>
	{
	case LCD_u8DispLine1:
		if((Copy_u8Xpos>=0) &&(Copy_u8Xpos<16))
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	80 31       	cpi	r24, 0x10	; 16
    123a:	50 f4       	brcc	.+20     	; 0x1250 <LCD_voidGotoXY+0x4a>
		{
			Local_u8ActualAdd = LCD_u8ComDispFirstRow
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 58       	subi	r24, 0x80	; 128
    1240:	89 83       	std	Y+1, r24	; 0x01
    1242:	06 c0       	rjmp	.+12     	; 0x1250 <LCD_voidGotoXY+0x4a>
		}

		break;
	case LCD_u8DispLine2:

		if((Copy_u8Xpos>=0) &&((Copy_u8Xpos<16)))
    1244:	8a 81       	ldd	r24, Y+2	; 0x02
    1246:	80 31       	cpi	r24, 0x10	; 16
    1248:	18 f4       	brcc	.+6      	; 0x1250 <LCD_voidGotoXY+0x4a>
		{
			Local_u8ActualAdd = LCD_u8ComDispSecondRow
    124a:	8a 81       	ldd	r24, Y+2	; 0x02
    124c:	80 54       	subi	r24, 0x40	; 64
    124e:	89 83       	std	Y+1, r24	; 0x01
					+Copy_u8Xpos;
		}
		break;
	}
	LCD_voidWriteCommand(Local_u8ActualAdd);
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	0e 94 ce 08 	call	0x119c	; 0x119c <LCD_voidWriteCommand>
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	08 95       	ret

00001266 <LCD_voidClearScreen>:


void LCD_voidClearScreen(void)
{
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand(LCD_u8ComClearScreen);
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	0e 94 ce 08 	call	0x119c	; 0x119c <LCD_voidWriteCommand>
}
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <LCD_voidWakeUp>:


void LCD_voidWakeUp(void)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	6c 97       	sbiw	r28, 0x1c	; 28
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	de bf       	out	0x3e, r29	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	cd bf       	out	0x3d, r28	; 61
	LCD_u8ControlPort |= (1<<LCD_u8EnablePin);
    128e:	a8 e3       	ldi	r26, 0x38	; 56
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	e8 e3       	ldi	r30, 0x38	; 56
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	84 60       	ori	r24, 0x04	; 4
    129a:	8c 93       	st	X, r24
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a0 e7       	ldi	r26, 0x70	; 112
    12a2:	b1 e4       	ldi	r27, 0x41	; 65
    12a4:	89 8f       	std	Y+25, r24	; 0x19
    12a6:	9a 8f       	std	Y+26, r25	; 0x1a
    12a8:	ab 8f       	std	Y+27, r26	; 0x1b
    12aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ac:	69 8d       	ldd	r22, Y+25	; 0x19
    12ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b4:	20 e0       	ldi	r18, 0x00	; 0
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	4a e7       	ldi	r20, 0x7A	; 122
    12ba:	55 e4       	ldi	r21, 0x45	; 69
    12bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	8d 8b       	std	Y+21, r24	; 0x15
    12c6:	9e 8b       	std	Y+22, r25	; 0x16
    12c8:	af 8b       	std	Y+23, r26	; 0x17
    12ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12cc:	6d 89       	ldd	r22, Y+21	; 0x15
    12ce:	7e 89       	ldd	r23, Y+22	; 0x16
    12d0:	8f 89       	ldd	r24, Y+23	; 0x17
    12d2:	98 8d       	ldd	r25, Y+24	; 0x18
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	40 e8       	ldi	r20, 0x80	; 128
    12da:	5f e3       	ldi	r21, 0x3F	; 63
    12dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12e0:	88 23       	and	r24, r24
    12e2:	2c f4       	brge	.+10     	; 0x12ee <LCD_voidWakeUp+0x74>
		__ticks = 1;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	9c 8b       	std	Y+20, r25	; 0x14
    12ea:	8b 8b       	std	Y+19, r24	; 0x13
    12ec:	3f c0       	rjmp	.+126    	; 0x136c <LCD_voidWakeUp+0xf2>
	else if (__tmp > 65535)
    12ee:	6d 89       	ldd	r22, Y+21	; 0x15
    12f0:	7e 89       	ldd	r23, Y+22	; 0x16
    12f2:	8f 89       	ldd	r24, Y+23	; 0x17
    12f4:	98 8d       	ldd	r25, Y+24	; 0x18
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	3f ef       	ldi	r19, 0xFF	; 255
    12fa:	4f e7       	ldi	r20, 0x7F	; 127
    12fc:	57 e4       	ldi	r21, 0x47	; 71
    12fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1302:	18 16       	cp	r1, r24
    1304:	4c f5       	brge	.+82     	; 0x1358 <LCD_voidWakeUp+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1306:	69 8d       	ldd	r22, Y+25	; 0x19
    1308:	7a 8d       	ldd	r23, Y+26	; 0x1a
    130a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    130c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e2       	ldi	r20, 0x20	; 32
    1314:	51 e4       	ldi	r21, 0x41	; 65
    1316:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	9c 8b       	std	Y+20, r25	; 0x14
    132c:	8b 8b       	std	Y+19, r24	; 0x13
    132e:	0f c0       	rjmp	.+30     	; 0x134e <LCD_voidWakeUp+0xd4>
    1330:	80 e9       	ldi	r24, 0x90	; 144
    1332:	91 e0       	ldi	r25, 0x01	; 1
    1334:	9a 8b       	std	Y+18, r25	; 0x12
    1336:	89 8b       	std	Y+17, r24	; 0x11
    1338:	89 89       	ldd	r24, Y+17	; 0x11
    133a:	9a 89       	ldd	r25, Y+18	; 0x12
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <LCD_voidWakeUp+0xc2>
    1340:	9a 8b       	std	Y+18, r25	; 0x12
    1342:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1344:	8b 89       	ldd	r24, Y+19	; 0x13
    1346:	9c 89       	ldd	r25, Y+20	; 0x14
    1348:	01 97       	sbiw	r24, 0x01	; 1
    134a:	9c 8b       	std	Y+20, r25	; 0x14
    134c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134e:	8b 89       	ldd	r24, Y+19	; 0x13
    1350:	9c 89       	ldd	r25, Y+20	; 0x14
    1352:	00 97       	sbiw	r24, 0x00	; 0
    1354:	69 f7       	brne	.-38     	; 0x1330 <LCD_voidWakeUp+0xb6>
    1356:	14 c0       	rjmp	.+40     	; 0x1380 <LCD_voidWakeUp+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1358:	6d 89       	ldd	r22, Y+21	; 0x15
    135a:	7e 89       	ldd	r23, Y+22	; 0x16
    135c:	8f 89       	ldd	r24, Y+23	; 0x17
    135e:	98 8d       	ldd	r25, Y+24	; 0x18
    1360:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	9c 8b       	std	Y+20, r25	; 0x14
    136a:	8b 8b       	std	Y+19, r24	; 0x13
    136c:	8b 89       	ldd	r24, Y+19	; 0x13
    136e:	9c 89       	ldd	r25, Y+20	; 0x14
    1370:	98 8b       	std	Y+16, r25	; 0x10
    1372:	8f 87       	std	Y+15, r24	; 0x0f
    1374:	8f 85       	ldd	r24, Y+15	; 0x0f
    1376:	98 89       	ldd	r25, Y+16	; 0x10
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <LCD_voidWakeUp+0xfe>
    137c:	98 8b       	std	Y+16, r25	; 0x10
    137e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(15);//2
	LCD_u8ControlPort &= (~(1<<LCD_u8EnablePin));
    1380:	a8 e3       	ldi	r26, 0x38	; 56
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e8 e3       	ldi	r30, 0x38	; 56
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	8b 7f       	andi	r24, 0xFB	; 251
    138c:	8c 93       	st	X, r24
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	a0 e7       	ldi	r26, 0x70	; 112
    1394:	b1 e4       	ldi	r27, 0x41	; 65
    1396:	8b 87       	std	Y+11, r24	; 0x0b
    1398:	9c 87       	std	Y+12, r25	; 0x0c
    139a:	ad 87       	std	Y+13, r26	; 0x0d
    139c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    139e:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	4a e7       	ldi	r20, 0x7A	; 122
    13ac:	55 e4       	ldi	r21, 0x45	; 69
    13ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13b2:	dc 01       	movw	r26, r24
    13b4:	cb 01       	movw	r24, r22
    13b6:	8f 83       	std	Y+7, r24	; 0x07
    13b8:	98 87       	std	Y+8, r25	; 0x08
    13ba:	a9 87       	std	Y+9, r26	; 0x09
    13bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13be:	6f 81       	ldd	r22, Y+7	; 0x07
    13c0:	78 85       	ldd	r23, Y+8	; 0x08
    13c2:	89 85       	ldd	r24, Y+9	; 0x09
    13c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13d2:	88 23       	and	r24, r24
    13d4:	2c f4       	brge	.+10     	; 0x13e0 <LCD_voidWakeUp+0x166>
		__ticks = 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9e 83       	std	Y+6, r25	; 0x06
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	3f c0       	rjmp	.+126    	; 0x145e <LCD_voidWakeUp+0x1e4>
	else if (__tmp > 65535)
    13e0:	6f 81       	ldd	r22, Y+7	; 0x07
    13e2:	78 85       	ldd	r23, Y+8	; 0x08
    13e4:	89 85       	ldd	r24, Y+9	; 0x09
    13e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	3f ef       	ldi	r19, 0xFF	; 255
    13ec:	4f e7       	ldi	r20, 0x7F	; 127
    13ee:	57 e4       	ldi	r21, 0x47	; 71
    13f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13f4:	18 16       	cp	r1, r24
    13f6:	4c f5       	brge	.+82     	; 0x144a <LCD_voidWakeUp+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    13fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e2       	ldi	r20, 0x20	; 32
    1406:	51 e4       	ldi	r21, 0x41	; 65
    1408:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    140c:	dc 01       	movw	r26, r24
    140e:	cb 01       	movw	r24, r22
    1410:	bc 01       	movw	r22, r24
    1412:	cd 01       	movw	r24, r26
    1414:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	8d 83       	std	Y+5, r24	; 0x05
    1420:	0f c0       	rjmp	.+30     	; 0x1440 <LCD_voidWakeUp+0x1c6>
    1422:	80 e9       	ldi	r24, 0x90	; 144
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	9c 83       	std	Y+4, r25	; 0x04
    1428:	8b 83       	std	Y+3, r24	; 0x03
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	01 97       	sbiw	r24, 0x01	; 1
    1430:	f1 f7       	brne	.-4      	; 0x142e <LCD_voidWakeUp+0x1b4>
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1436:	8d 81       	ldd	r24, Y+5	; 0x05
    1438:	9e 81       	ldd	r25, Y+6	; 0x06
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1440:	8d 81       	ldd	r24, Y+5	; 0x05
    1442:	9e 81       	ldd	r25, Y+6	; 0x06
    1444:	00 97       	sbiw	r24, 0x00	; 0
    1446:	69 f7       	brne	.-38     	; 0x1422 <LCD_voidWakeUp+0x1a8>
    1448:	14 c0       	rjmp	.+40     	; 0x1472 <LCD_voidWakeUp+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    144a:	6f 81       	ldd	r22, Y+7	; 0x07
    144c:	78 85       	ldd	r23, Y+8	; 0x08
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9e 83       	std	Y+6, r25	; 0x06
    145c:	8d 83       	std	Y+5, r24	; 0x05
    145e:	8d 81       	ldd	r24, Y+5	; 0x05
    1460:	9e 81       	ldd	r25, Y+6	; 0x06
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	89 83       	std	Y+1, r24	; 0x01
    1466:	89 81       	ldd	r24, Y+1	; 0x01
    1468:	9a 81       	ldd	r25, Y+2	; 0x02
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	f1 f7       	brne	.-4      	; 0x146a <LCD_voidWakeUp+0x1f0>
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(15);//2
}
    1472:	6c 96       	adiw	r28, 0x1c	; 28
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <LCD_voidWriteString>:



void LCD_voidWriteString(u8 * Copy_u8StringArr, u8 Copy_u8CharNum)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	62 97       	sbiw	r28, 0x12	; 18
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	99 8b       	std	Y+17, r25	; 0x11
    149a:	88 8b       	std	Y+16, r24	; 0x10
    149c:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8Counter=0;
    149e:	1f 86       	std	Y+15, r1	; 0x0f
    14a0:	80 c0       	rjmp	.+256    	; 0x15a2 <LCD_voidWriteString+0x11e>
//	for(Local_u8Counter =0;Local_u8Counter < Copy_u8CharNum
//	;Local_u8Counter++ )
//	{
		while ( Copy_u8StringArr[Local_u8Counter] !='\0' )
		{
		LCD_voidWriteChar(Copy_u8StringArr[Local_u8Counter]);
    14a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	88 89       	ldd	r24, Y+16	; 0x10
    14aa:	99 89       	ldd	r25, Y+17	; 0x11
    14ac:	fc 01       	movw	r30, r24
    14ae:	e2 0f       	add	r30, r18
    14b0:	f3 1f       	adc	r31, r19
    14b2:	80 81       	ld	r24, Z
    14b4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <LCD_voidWriteChar>
		Local_u8Counter++;
    14b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
    14bc:	8f 87       	std	Y+15, r24	; 0x0f
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	a0 e7       	ldi	r26, 0x70	; 112
    14c4:	b1 e4       	ldi	r27, 0x41	; 65
    14c6:	8b 87       	std	Y+11, r24	; 0x0b
    14c8:	9c 87       	std	Y+12, r25	; 0x0c
    14ca:	ad 87       	std	Y+13, r26	; 0x0d
    14cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	4a e7       	ldi	r20, 0x7A	; 122
    14dc:	55 e4       	ldi	r21, 0x45	; 69
    14de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	8f 83       	std	Y+7, r24	; 0x07
    14e8:	98 87       	std	Y+8, r25	; 0x08
    14ea:	a9 87       	std	Y+9, r26	; 0x09
    14ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	78 85       	ldd	r23, Y+8	; 0x08
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e8       	ldi	r20, 0x80	; 128
    14fc:	5f e3       	ldi	r21, 0x3F	; 63
    14fe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1502:	88 23       	and	r24, r24
    1504:	2c f4       	brge	.+10     	; 0x1510 <LCD_voidWriteString+0x8c>
		__ticks = 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	9e 83       	std	Y+6, r25	; 0x06
    150c:	8d 83       	std	Y+5, r24	; 0x05
    150e:	3f c0       	rjmp	.+126    	; 0x158e <LCD_voidWriteString+0x10a>
	else if (__tmp > 65535)
    1510:	6f 81       	ldd	r22, Y+7	; 0x07
    1512:	78 85       	ldd	r23, Y+8	; 0x08
    1514:	89 85       	ldd	r24, Y+9	; 0x09
    1516:	9a 85       	ldd	r25, Y+10	; 0x0a
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	3f ef       	ldi	r19, 0xFF	; 255
    151c:	4f e7       	ldi	r20, 0x7F	; 127
    151e:	57 e4       	ldi	r21, 0x47	; 71
    1520:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1524:	18 16       	cp	r1, r24
    1526:	4c f5       	brge	.+82     	; 0x157a <LCD_voidWriteString+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1528:	6b 85       	ldd	r22, Y+11	; 0x0b
    152a:	7c 85       	ldd	r23, Y+12	; 0x0c
    152c:	8d 85       	ldd	r24, Y+13	; 0x0d
    152e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e2       	ldi	r20, 0x20	; 32
    1536:	51 e4       	ldi	r21, 0x41	; 65
    1538:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	0f c0       	rjmp	.+30     	; 0x1570 <LCD_voidWriteString+0xec>
    1552:	80 e9       	ldi	r24, 0x90	; 144
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	9c 83       	std	Y+4, r25	; 0x04
    1558:	8b 83       	std	Y+3, r24	; 0x03
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	f1 f7       	brne	.-4      	; 0x155e <LCD_voidWriteString+0xda>
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	69 f7       	brne	.-38     	; 0x1552 <LCD_voidWriteString+0xce>
    1578:	14 c0       	rjmp	.+40     	; 0x15a2 <LCD_voidWriteString+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	9e 83       	std	Y+6, r25	; 0x06
    158c:	8d 83       	std	Y+5, r24	; 0x05
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	9a 81       	ldd	r25, Y+2	; 0x02
    159a:	01 97       	sbiw	r24, 0x01	; 1
    159c:	f1 f7       	brne	.-4      	; 0x159a <LCD_voidWriteString+0x116>
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8Counter=0;

//	for(Local_u8Counter =0;Local_u8Counter < Copy_u8CharNum
//	;Local_u8Counter++ )
//	{
		while ( Copy_u8StringArr[Local_u8Counter] !='\0' )
    15a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	88 89       	ldd	r24, Y+16	; 0x10
    15aa:	99 89       	ldd	r25, Y+17	; 0x11
    15ac:	fc 01       	movw	r30, r24
    15ae:	e2 0f       	add	r30, r18
    15b0:	f3 1f       	adc	r31, r19
    15b2:	80 81       	ld	r24, Z
    15b4:	88 23       	and	r24, r24
    15b6:	09 f0       	breq	.+2      	; 0x15ba <LCD_voidWriteString+0x136>
    15b8:	74 cf       	rjmp	.-280    	; 0x14a2 <LCD_voidWriteString+0x1e>
		{
		LCD_voidWriteChar(Copy_u8StringArr[Local_u8Counter]);
		Local_u8Counter++;
		_delay_ms(15);
		}
	}
    15ba:	62 96       	adiw	r28, 0x12	; 18
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	f8 94       	cli
    15c0:	de bf       	out	0x3e, r29	; 62
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	cd bf       	out	0x3d, r28	; 61
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <LCD_VoidInttoString>:

//}

void LCD_VoidInttoString(u32 number , u8*num_string )
{
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	2f 97       	sbiw	r28, 0x0f	; 15
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	6a 87       	std	Y+10, r22	; 0x0a
    15e6:	7b 87       	std	Y+11, r23	; 0x0b
    15e8:	8c 87       	std	Y+12, r24	; 0x0c
    15ea:	9d 87       	std	Y+13, r25	; 0x0d
    15ec:	5f 87       	std	Y+15, r21	; 0x0f
    15ee:	4e 87       	std	Y+14, r20	; 0x0e
	u8 index =0;
    15f0:	19 86       	std	Y+9, r1	; 0x09
	u32 counter =1;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	a0 e0       	ldi	r26, 0x00	; 0
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	8d 83       	std	Y+5, r24	; 0x05
    15fc:	9e 83       	std	Y+6, r25	; 0x06
    15fe:	af 83       	std	Y+7, r26	; 0x07
    1600:	b8 87       	std	Y+8, r27	; 0x08
	u32 copy_number=number;
    1602:	8a 85       	ldd	r24, Y+10	; 0x0a
    1604:	9b 85       	ldd	r25, Y+11	; 0x0b
    1606:	ac 85       	ldd	r26, Y+12	; 0x0c
    1608:	bd 85       	ldd	r27, Y+13	; 0x0d
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	ab 83       	std	Y+3, r26	; 0x03
    1610:	bc 83       	std	Y+4, r27	; 0x04
    1612:	24 c0       	rjmp	.+72     	; 0x165c <LCD_VoidInttoString+0x90>
	while  (number!=0)
	{
		number/=10;
    1614:	8a 85       	ldd	r24, Y+10	; 0x0a
    1616:	9b 85       	ldd	r25, Y+11	; 0x0b
    1618:	ac 85       	ldd	r26, Y+12	; 0x0c
    161a:	bd 85       	ldd	r27, Y+13	; 0x0d
    161c:	2a e0       	ldi	r18, 0x0A	; 10
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	50 e0       	ldi	r21, 0x00	; 0
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodsi4>
    162c:	da 01       	movw	r26, r20
    162e:	c9 01       	movw	r24, r18
    1630:	8a 87       	std	Y+10, r24	; 0x0a
    1632:	9b 87       	std	Y+11, r25	; 0x0b
    1634:	ac 87       	std	Y+12, r26	; 0x0c
    1636:	bd 87       	std	Y+13, r27	; 0x0d
		counter *=10;
    1638:	8d 81       	ldd	r24, Y+5	; 0x05
    163a:	9e 81       	ldd	r25, Y+6	; 0x06
    163c:	af 81       	ldd	r26, Y+7	; 0x07
    163e:	b8 85       	ldd	r27, Y+8	; 0x08
    1640:	2a e0       	ldi	r18, 0x0A	; 10
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__mulsi3>
    1650:	dc 01       	movw	r26, r24
    1652:	cb 01       	movw	r24, r22
    1654:	8d 83       	std	Y+5, r24	; 0x05
    1656:	9e 83       	std	Y+6, r25	; 0x06
    1658:	af 83       	std	Y+7, r26	; 0x07
    165a:	b8 87       	std	Y+8, r27	; 0x08
void LCD_VoidInttoString(u32 number , u8*num_string )
{
	u8 index =0;
	u32 counter =1;
	u32 copy_number=number;
	while  (number!=0)
    165c:	8a 85       	ldd	r24, Y+10	; 0x0a
    165e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1660:	ac 85       	ldd	r26, Y+12	; 0x0c
    1662:	bd 85       	ldd	r27, Y+13	; 0x0d
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	a1 05       	cpc	r26, r1
    1668:	b1 05       	cpc	r27, r1
    166a:	a1 f6       	brne	.-88     	; 0x1614 <LCD_VoidInttoString+0x48>
	{
		number/=10;
		counter *=10;
	}
	number=copy_number;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	9a 81       	ldd	r25, Y+2	; 0x02
    1670:	ab 81       	ldd	r26, Y+3	; 0x03
    1672:	bc 81       	ldd	r27, Y+4	; 0x04
    1674:	8a 87       	std	Y+10, r24	; 0x0a
    1676:	9b 87       	std	Y+11, r25	; 0x0b
    1678:	ac 87       	std	Y+12, r26	; 0x0c
    167a:	bd 87       	std	Y+13, r27	; 0x0d
	counter /=10;
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	af 81       	ldd	r26, Y+7	; 0x07
    1682:	b8 85       	ldd	r27, Y+8	; 0x08
    1684:	2a e0       	ldi	r18, 0x0A	; 10
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	bc 01       	movw	r22, r24
    168e:	cd 01       	movw	r24, r26
    1690:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodsi4>
    1694:	da 01       	movw	r26, r20
    1696:	c9 01       	movw	r24, r18
    1698:	8d 83       	std	Y+5, r24	; 0x05
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	af 83       	std	Y+7, r26	; 0x07
    169e:	b8 87       	std	Y+8, r27	; 0x08
    16a0:	63 c0       	rjmp	.+198    	; 0x1768 <LCD_VoidInttoString+0x19c>

	while(number!=0||counter!=0)
	{
		num_string[index]= (number/counter);
    16a2:	89 85       	ldd	r24, Y+9	; 0x09
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16aa:	9f 85       	ldd	r25, Y+15	; 0x0f
    16ac:	8c 01       	movw	r16, r24
    16ae:	02 0f       	add	r16, r18
    16b0:	13 1f       	adc	r17, r19
    16b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    16b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    16b6:	ac 85       	ldd	r26, Y+12	; 0x0c
    16b8:	bd 85       	ldd	r27, Y+13	; 0x0d
    16ba:	2d 81       	ldd	r18, Y+5	; 0x05
    16bc:	3e 81       	ldd	r19, Y+6	; 0x06
    16be:	4f 81       	ldd	r20, Y+7	; 0x07
    16c0:	58 85       	ldd	r21, Y+8	; 0x08
    16c2:	bc 01       	movw	r22, r24
    16c4:	cd 01       	movw	r24, r26
    16c6:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodsi4>
    16ca:	da 01       	movw	r26, r20
    16cc:	c9 01       	movw	r24, r18
    16ce:	f8 01       	movw	r30, r16
    16d0:	80 83       	st	Z, r24
		number -=(num_string[index]*counter);
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    16da:	9f 85       	ldd	r25, Y+15	; 0x0f
    16dc:	fc 01       	movw	r30, r24
    16de:	e2 0f       	add	r30, r18
    16e0:	f3 1f       	adc	r31, r19
    16e2:	80 81       	ld	r24, Z
    16e4:	88 2f       	mov	r24, r24
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	2d 81       	ldd	r18, Y+5	; 0x05
    16ee:	3e 81       	ldd	r19, Y+6	; 0x06
    16f0:	4f 81       	ldd	r20, Y+7	; 0x07
    16f2:	58 85       	ldd	r21, Y+8	; 0x08
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <__mulsi3>
    16fc:	9b 01       	movw	r18, r22
    16fe:	ac 01       	movw	r20, r24
    1700:	8a 85       	ldd	r24, Y+10	; 0x0a
    1702:	9b 85       	ldd	r25, Y+11	; 0x0b
    1704:	ac 85       	ldd	r26, Y+12	; 0x0c
    1706:	bd 85       	ldd	r27, Y+13	; 0x0d
    1708:	82 1b       	sub	r24, r18
    170a:	93 0b       	sbc	r25, r19
    170c:	a4 0b       	sbc	r26, r20
    170e:	b5 0b       	sbc	r27, r21
    1710:	8a 87       	std	Y+10, r24	; 0x0a
    1712:	9b 87       	std	Y+11, r25	; 0x0b
    1714:	ac 87       	std	Y+12, r26	; 0x0c
    1716:	bd 87       	std	Y+13, r27	; 0x0d
		num_string[index]+=48;
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1720:	9f 85       	ldd	r25, Y+15	; 0x0f
    1722:	dc 01       	movw	r26, r24
    1724:	a2 0f       	add	r26, r18
    1726:	b3 1f       	adc	r27, r19
    1728:	89 85       	ldd	r24, Y+9	; 0x09
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1730:	9f 85       	ldd	r25, Y+15	; 0x0f
    1732:	fc 01       	movw	r30, r24
    1734:	e2 0f       	add	r30, r18
    1736:	f3 1f       	adc	r31, r19
    1738:	80 81       	ld	r24, Z
    173a:	80 5d       	subi	r24, 0xD0	; 208
    173c:	8c 93       	st	X, r24
		counter/=10;
    173e:	8d 81       	ldd	r24, Y+5	; 0x05
    1740:	9e 81       	ldd	r25, Y+6	; 0x06
    1742:	af 81       	ldd	r26, Y+7	; 0x07
    1744:	b8 85       	ldd	r27, Y+8	; 0x08
    1746:	2a e0       	ldi	r18, 0x0A	; 10
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__udivmodsi4>
    1756:	da 01       	movw	r26, r20
    1758:	c9 01       	movw	r24, r18
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	9e 83       	std	Y+6, r25	; 0x06
    175e:	af 83       	std	Y+7, r26	; 0x07
    1760:	b8 87       	std	Y+8, r27	; 0x08
		index++;
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	89 87       	std	Y+9, r24	; 0x09
		counter *=10;
	}
	number=copy_number;
	counter /=10;

	while(number!=0||counter!=0)
    1768:	8a 85       	ldd	r24, Y+10	; 0x0a
    176a:	9b 85       	ldd	r25, Y+11	; 0x0b
    176c:	ac 85       	ldd	r26, Y+12	; 0x0c
    176e:	bd 85       	ldd	r27, Y+13	; 0x0d
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	a1 05       	cpc	r26, r1
    1774:	b1 05       	cpc	r27, r1
    1776:	09 f0       	breq	.+2      	; 0x177a <LCD_VoidInttoString+0x1ae>
    1778:	94 cf       	rjmp	.-216    	; 0x16a2 <LCD_VoidInttoString+0xd6>
    177a:	8d 81       	ldd	r24, Y+5	; 0x05
    177c:	9e 81       	ldd	r25, Y+6	; 0x06
    177e:	af 81       	ldd	r26, Y+7	; 0x07
    1780:	b8 85       	ldd	r27, Y+8	; 0x08
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	a1 05       	cpc	r26, r1
    1786:	b1 05       	cpc	r27, r1
    1788:	09 f0       	breq	.+2      	; 0x178c <LCD_VoidInttoString+0x1c0>
    178a:	8b cf       	rjmp	.-234    	; 0x16a2 <LCD_VoidInttoString+0xd6>
		number -=(num_string[index]*counter);
		num_string[index]+=48;
		counter/=10;
		index++;
	}
	num_string[index]='\0';
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	28 2f       	mov	r18, r24
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	8e 85       	ldd	r24, Y+14	; 0x0e
    1794:	9f 85       	ldd	r25, Y+15	; 0x0f
    1796:	fc 01       	movw	r30, r24
    1798:	e2 0f       	add	r30, r18
    179a:	f3 1f       	adc	r31, r19
    179c:	10 82       	st	Z, r1
}
    179e:	2f 96       	adiw	r28, 0x0f	; 15
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	1f 91       	pop	r17
    17b0:	0f 91       	pop	r16
    17b2:	08 95       	ret

000017b4 <ADC_VoidInitialize>:
#include "DIO_interface.h"



void ADC_VoidInitialize(void)
{
    17b4:	df 93       	push	r29
    17b6:	cf 93       	push	r28
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
	ADC_u8_ADMUXREG |=(ADC_u8ref |ADC_u8ADJUST |ADC_u8_ChannelConfig);
    17bc:	a7 e2       	ldi	r26, 0x27	; 39
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e7 e2       	ldi	r30, 0x27	; 39
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	80 66       	ori	r24, 0x60	; 96
    17c8:	8c 93       	st	X, r24
    ADC_u8_ADCSRA_REG |=(ADC_u8_PERI_STATE |ADC_u8_AutoTRIG |ADC_u8_INT_STATE |ADC_u8_PRESCALER);
    17ca:	a6 e2       	ldi	r26, 0x26	; 38
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e6 e2       	ldi	r30, 0x26	; 38
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	86 68       	ori	r24, 0x86	; 134
    17d6:	8c 93       	st	X, r24
#endif

#if   		ADC_u8_GIE ==MCU_GI_ENABLE
    MCU_u8_SREG |=ADC_u8_GIE;
#endif
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <ADC_u8StartConversion>:

void ADC_u8StartConversion(u8 ADC_Channel)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	0f 92       	push	r0
    17e4:	cd b7       	in	r28, 0x3d	; 61
    17e6:	de b7       	in	r29, 0x3e	; 62
    17e8:	89 83       	std	Y+1, r24	; 0x01
	ADC_u8_ADMUXREG |=ADC_Channel;
    17ea:	a7 e2       	ldi	r26, 0x27	; 39
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e7 e2       	ldi	r30, 0x27	; 39
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	90 81       	ld	r25, Z
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	89 2b       	or	r24, r25
    17f8:	8c 93       	st	X, r24
	ADC_u8_ADCSRA_REG |=ADC_u8_INT_FLAG_MUSK ;
    17fa:	a6 e2       	ldi	r26, 0x26	; 38
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e6 e2       	ldi	r30, 0x26	; 38
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	80 61       	ori	r24, 0x10	; 16
    1806:	8c 93       	st	X, r24

}
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <ADC_u8ReadDigital>:


   u8 ADC_u8ReadDigital(void)
   {
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <ADC_u8ReadDigital+0x6>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
	   u8 local_ADCRead;
	   while (!ADC_u8_ADCSRA_REG &ADC_u8_INT_FLAG_MUSK );
    181a:	e6 e2       	ldi	r30, 0x26	; 38
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
	   local_ADCRead = ADC_u8_ADCH_REG;
    1820:	84 e2       	ldi	r24, 0x24	; 36
    1822:	89 83       	std	Y+1, r24	; 0x01

	   return(local_ADCRead);
    1824:	89 81       	ldd	r24, Y+1	; 0x01
   }
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <DIO_VoidInitializaion>:
#include "STD_TYPES_H.h"
#include "DIO_interface.h"


void DIO_VoidInitializaion(void)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <DIO_VoidInitializaion+0x6>
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
	u8 i= ZERO;
    183c:	1b 82       	std	Y+3, r1	; 0x03
	u8 volatile* REG = DDRD;
    183e:	81 e3       	ldi	r24, 0x31	; 49
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	9a 83       	std	Y+2, r25	; 0x02
    1844:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<=PORT_A;i++)
    1846:	1b 82       	std	Y+3, r1	; 0x03
    1848:	11 c0       	rjmp	.+34     	; 0x186c <DIO_VoidInitializaion+0x3c>
	{
		REG=DDRD+(DIO_REG_OFSET*i);
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	c9 01       	movw	r24, r18
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	82 0f       	add	r24, r18
    1858:	93 1f       	adc	r25, r19
    185a:	c1 96       	adiw	r24, 0x31	; 49
    185c:	9a 83       	std	Y+2, r25	; 0x02
    185e:	89 83       	std	Y+1, r24	; 0x01
				*REG=ZERO;
    1860:	e9 81       	ldd	r30, Y+1	; 0x01
    1862:	fa 81       	ldd	r31, Y+2	; 0x02
    1864:	10 82       	st	Z, r1

void DIO_VoidInitializaion(void)
{
	u8 i= ZERO;
	u8 volatile* REG = DDRD;
	for(i=0;i<=PORT_A;i++)
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	8f 5f       	subi	r24, 0xFF	; 255
    186a:	8b 83       	std	Y+3, r24	; 0x03
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	84 30       	cpi	r24, 0x04	; 4
    1870:	60 f3       	brcs	.-40     	; 0x184a <DIO_VoidInitializaion+0x1a>
	{
		REG=DDRD+(DIO_REG_OFSET*i);
				*REG=ZERO;
	}
			REG=PORTD;
    1872:	82 e3       	ldi	r24, 0x32	; 50
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<=PORT_A;i++)
    187a:	1b 82       	std	Y+3, r1	; 0x03
    187c:	11 c0       	rjmp	.+34     	; 0x18a0 <DIO_VoidInitializaion+0x70>
		{
			REG=PORTD+(DIO_REG_OFSET*i);
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	c9 01       	movw	r24, r18
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	c2 96       	adiw	r24, 0x32	; 50
    1890:	9a 83       	std	Y+2, r25	; 0x02
    1892:	89 83       	std	Y+1, r24	; 0x01
					*REG=ZERO;
    1894:	e9 81       	ldd	r30, Y+1	; 0x01
    1896:	fa 81       	ldd	r31, Y+2	; 0x02
    1898:	10 82       	st	Z, r1
	{
		REG=DDRD+(DIO_REG_OFSET*i);
				*REG=ZERO;
	}
			REG=PORTD;
	for(i=0;i<=PORT_A;i++)
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	8f 5f       	subi	r24, 0xFF	; 255
    189e:	8b 83       	std	Y+3, r24	; 0x03
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	84 30       	cpi	r24, 0x04	; 4
    18a4:	60 f3       	brcs	.-40     	; 0x187e <DIO_VoidInitializaion+0x4e>
		{
			REG=PORTD+(DIO_REG_OFSET*i);
					*REG=ZERO;
		}
	REG=PIND;
    18a6:	80 e3       	ldi	r24, 0x30	; 48
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	9a 83       	std	Y+2, r25	; 0x02
    18ac:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<=PORT_A;i++)
    18ae:	1b 82       	std	Y+3, r1	; 0x03
    18b0:	11 c0       	rjmp	.+34     	; 0x18d4 <DIO_VoidInitializaion+0xa4>
		{
			REG=PIND+(DIO_REG_OFSET*i);
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	c9 01       	movw	r24, r18
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	82 0f       	add	r24, r18
    18c0:	93 1f       	adc	r25, r19
    18c2:	c0 96       	adiw	r24, 0x30	; 48
    18c4:	9a 83       	std	Y+2, r25	; 0x02
    18c6:	89 83       	std	Y+1, r24	; 0x01
					*REG=ZERO;
    18c8:	e9 81       	ldd	r30, Y+1	; 0x01
    18ca:	fa 81       	ldd	r31, Y+2	; 0x02
    18cc:	10 82       	st	Z, r1
		{
			REG=PORTD+(DIO_REG_OFSET*i);
					*REG=ZERO;
		}
	REG=PIND;
	for(i=0;i<=PORT_A;i++)
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	8f 5f       	subi	r24, 0xFF	; 255
    18d2:	8b 83       	std	Y+3, r24	; 0x03
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	84 30       	cpi	r24, 0x04	; 4
    18d8:	60 f3       	brcs	.-40     	; 0x18b2 <DIO_VoidInitializaion+0x82>
		{
			REG=PIND+(DIO_REG_OFSET*i);
					*REG=ZERO;
		}

}
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	08 95       	ret

000018e6 <DIO_STDSetPinDir>:
STD_ERROR DIO_STDSetPinDir(u8 PORT_,u8 P_,u8 DIO_DIR)
{
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
    18ee:	27 97       	sbiw	r28, 0x07	; 7
    18f0:	0f b6       	in	r0, 0x3f	; 63
    18f2:	f8 94       	cli
    18f4:	de bf       	out	0x3e, r29	; 62
    18f6:	0f be       	out	0x3f, r0	; 63
    18f8:	cd bf       	out	0x3d, r28	; 61
    18fa:	8c 83       	std	Y+4, r24	; 0x04
    18fc:	6d 83       	std	Y+5, r22	; 0x05
    18fe:	4e 83       	std	Y+6, r20	; 0x06
	STD_ERROR LOC_ERROR=OK;
    1900:	1b 82       	std	Y+3, r1	; 0x03

	if(P_>=0 && P_<=7)
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	88 30       	cpi	r24, 0x08	; 8
    1906:	08 f0       	brcs	.+2      	; 0x190a <DIO_STDSetPinDir+0x24>
    1908:	57 c0       	rjmp	.+174    	; 0x19b8 <DIO_STDSetPinDir+0xd2>
	{
		if(PORT_>PORT_D && PORT_<PORT_A)
    190a:	8c 81       	ldd	r24, Y+4	; 0x04
    190c:	88 23       	and	r24, r24
    190e:	09 f4       	brne	.+2      	; 0x1912 <DIO_STDSetPinDir+0x2c>
    1910:	4f c0       	rjmp	.+158    	; 0x19b0 <DIO_STDSetPinDir+0xca>
    1912:	8c 81       	ldd	r24, Y+4	; 0x04
    1914:	83 30       	cpi	r24, 0x03	; 3
    1916:	08 f0       	brcs	.+2      	; 0x191a <DIO_STDSetPinDir+0x34>
    1918:	4b c0       	rjmp	.+150    	; 0x19b0 <DIO_STDSetPinDir+0xca>
		{
			u8 volatile* REG =DDRD;
    191a:	81 e3       	ldi	r24, 0x31	; 49
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01
			if (DIO_DIR == DIO__DIR_INPUT)
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	82 33       	cpi	r24, 0x32	; 50
    1926:	01 f5       	brne	.+64     	; 0x1968 <DIO_STDSetPinDir+0x82>
			{
				REG=DDRD+(DIO_REG_OFSET*PORT_);
    1928:	8c 81       	ldd	r24, Y+4	; 0x04
    192a:	28 2f       	mov	r18, r24
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	c9 01       	movw	r24, r18
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	82 0f       	add	r24, r18
    1936:	93 1f       	adc	r25, r19
    1938:	c1 96       	adiw	r24, 0x31	; 49
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01

				*REG &=~(1<<P_);
    193e:	e9 81       	ldd	r30, Y+1	; 0x01
    1940:	fa 81       	ldd	r31, Y+2	; 0x02
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8d 81       	ldd	r24, Y+5	; 0x05
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_STDSetPinDir+0x72>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_STDSetPinDir+0x6e>
    195c:	80 95       	com	r24
    195e:	84 23       	and	r24, r20
    1960:	e9 81       	ldd	r30, Y+1	; 0x01
    1962:	fa 81       	ldd	r31, Y+2	; 0x02
    1964:	80 83       	st	Z, r24
    1966:	24 c0       	rjmp	.+72     	; 0x19b0 <DIO_STDSetPinDir+0xca>
			}
			else if (DIO_DIR == DIO__DIR_OUTPUT)
    1968:	8e 81       	ldd	r24, Y+6	; 0x06
    196a:	86 34       	cpi	r24, 0x46	; 70
    196c:	f9 f4       	brne	.+62     	; 0x19ac <DIO_STDSetPinDir+0xc6>
			{
				REG=DDRD+(DIO_REG_OFSET*PORT_);
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	c9 01       	movw	r24, r18
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	82 0f       	add	r24, r18
    197c:	93 1f       	adc	r25, r19
    197e:	c1 96       	adiw	r24, 0x31	; 49
    1980:	9a 83       	std	Y+2, r25	; 0x02
    1982:	89 83       	std	Y+1, r24	; 0x01

				*REG |=(1<<P_);
    1984:	e9 81       	ldd	r30, Y+1	; 0x01
    1986:	fa 81       	ldd	r31, Y+2	; 0x02
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <DIO_STDSetPinDir+0xb8>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <DIO_STDSetPinDir+0xb4>
    19a2:	84 2b       	or	r24, r20
    19a4:	e9 81       	ldd	r30, Y+1	; 0x01
    19a6:	fa 81       	ldd	r31, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <DIO_STDSetPinDir+0xca>
			}
			else
			{
				LOC_ERROR=NOT_OK;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	8b 83       	std	Y+3, r24	; 0x03
			}
		 }
		return(LOC_ERROR);
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	8f 83       	std	Y+7, r24	; 0x07
	}

	}
    19b4:	8f 81       	ldd	r24, Y+7	; 0x07
    19b6:	00 c0       	rjmp	.+0      	; 0x19b8 <DIO_STDSetPinDir+0xd2>
    19b8:	27 96       	adiw	r28, 0x07	; 7
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
    19c4:	cf 91       	pop	r28
    19c6:	df 91       	pop	r29
    19c8:	08 95       	ret

000019ca <DIO_STDSetPinValue>:
	STD_ERROR DIO_STDSetPinValue(u8 PORT_, u8 P_, u8 DIO_VALUE_)
	{
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <DIO_STDSetPinValue+0x6>
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <DIO_STDSetPinValue+0x8>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <DIO_STDSetPinValue+0xa>
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	8c 83       	std	Y+4, r24	; 0x04
    19da:	6d 83       	std	Y+5, r22	; 0x05
    19dc:	4e 83       	std	Y+6, r20	; 0x06
		STD_ERROR LOC_ERROR=OK;
    19de:	1b 82       	std	Y+3, r1	; 0x03
		if(P_>=0 && P_<=7)
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	88 30       	cpi	r24, 0x08	; 8
    19e4:	08 f0       	brcs	.+2      	; 0x19e8 <DIO_STDSetPinValue+0x1e>
    19e6:	4b c0       	rjmp	.+150    	; 0x1a7e <DIO_STDSetPinValue+0xb4>
			{
				if(PORT_>PORT_D && PORT_<PORT_A)
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	88 23       	and	r24, r24
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <DIO_STDSetPinValue+0x26>
    19ee:	45 c0       	rjmp	.+138    	; 0x1a7a <DIO_STDSetPinValue+0xb0>
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <DIO_STDSetPinValue+0x2e>
    19f6:	41 c0       	rjmp	.+130    	; 0x1a7a <DIO_STDSetPinValue+0xb0>
				{
					u8 volatile * REG =PORTD;
    19f8:	82 e3       	ldi	r24, 0x32	; 50
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01

					REG=PORTD+(DIO_REG_OFSET*PORT_);
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	c9 01       	movw	r24, r18
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	82 0f       	add	r24, r18
    1a0e:	93 1f       	adc	r25, r19
    1a10:	c2 96       	adiw	r24, 0x32	; 50
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	89 83       	std	Y+1, r24	; 0x01

					if(DIO_VALUE_ ==DIO_VALUE_HIGH)
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	8c 33       	cpi	r24, 0x3C	; 60
    1a1a:	a1 f4       	brne	.+40     	; 0x1a44 <DIO_STDSetPinValue+0x7a>
					{
						*REG |=(1<<P_);
    1a1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a20:	80 81       	ld	r24, Z
    1a22:	48 2f       	mov	r20, r24
    1a24:	8d 81       	ldd	r24, Y+5	; 0x05
    1a26:	28 2f       	mov	r18, r24
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	02 2e       	mov	r0, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <DIO_STDSetPinValue+0x6c>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	0a 94       	dec	r0
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <DIO_STDSetPinValue+0x68>
    1a3a:	84 2b       	or	r24, r20
    1a3c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a3e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a40:	80 83       	st	Z, r24
    1a42:	1d c0       	rjmp	.+58     	; 0x1a7e <DIO_STDSetPinValue+0xb4>
					}
					else if(DIO_VALUE_ ==DIO_VALUE_LOW)
    1a44:	8e 81       	ldd	r24, Y+6	; 0x06
    1a46:	8a 35       	cpi	r24, 0x5A	; 90
    1a48:	a9 f4       	brne	.+42     	; 0x1a74 <DIO_STDSetPinValue+0xaa>
										{
											*REG  &=~(1<<P_);
    1a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <DIO_STDSetPinValue+0x9a>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <DIO_STDSetPinValue+0x96>
    1a68:	80 95       	com	r24
    1a6a:	84 23       	and	r24, r20
    1a6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a70:	80 83       	st	Z, r24
    1a72:	05 c0       	rjmp	.+10     	; 0x1a7e <DIO_STDSetPinValue+0xb4>
										}
					else
									{
										LOC_ERROR=NOT_OK;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <DIO_STDSetPinValue+0xb4>
									}

				}
				else
				{
					LOC_ERROR=NOT_OK;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
				}
			}

 return (LOC_ERROR);
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1a80:	26 96       	adiw	r28, 0x06	; 6
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <DIO_STDSetPortValue>:
	STD_ERROR  DIO_STDSetPortValue(u8 PORT_,  u8 DIO_VALUE_)
	{
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <DIO_STDSetPortValue+0x6>
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <DIO_STDSetPortValue+0x8>
    1a9a:	0f 92       	push	r0
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	8c 83       	std	Y+4, r24	; 0x04
    1aa2:	6d 83       	std	Y+5, r22	; 0x05
		STD_ERROR LOC_ERROR =OK;
    1aa4:	1b 82       	std	Y+3, r1	; 0x03


			u8 volatile*REG=PORT_D;
    1aa6:	1a 82       	std	Y+2, r1	; 0x02
    1aa8:	19 82       	std	Y+1, r1	; 0x01

			if (PORT_ >PORT_D && PORT_ < PORT_A)
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	88 23       	and	r24, r24
    1aae:	91 f0       	breq	.+36     	; 0x1ad4 <DIO_STDSetPortValue+0x42>
    1ab0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab2:	83 30       	cpi	r24, 0x03	; 3
    1ab4:	78 f4       	brcc	.+30     	; 0x1ad4 <DIO_STDSetPortValue+0x42>
			{
				REG=PORT_D+(DIO_REG_OFSET*PORT_);
    1ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	c9 01       	movw	r24, r18
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	82 0f       	add	r24, r18
    1ac4:	93 1f       	adc	r25, r19
    1ac6:	9a 83       	std	Y+2, r25	; 0x02
    1ac8:	89 83       	std	Y+1, r24	; 0x01
				*REG=DIO_VALUE_;
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad0:	80 83       	st	Z, r24
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_STDSetPortValue+0x46>
			}
			else
			{
				LOC_ERROR=NOT_OK;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	8b 83       	std	Y+3, r24	; 0x03

			}



		return(LOC_ERROR);
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <DIO_STDSetPortDir>:
	STD_ERROR DIO_STDSetPortDir(u8 PORT_, u8 DIO_DIR_)
	{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <DIO_STDSetPortDir+0x6>
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <DIO_STDSetPortDir+0x8>
    1af2:	0f 92       	push	r0
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	8c 83       	std	Y+4, r24	; 0x04
    1afa:	6d 83       	std	Y+5, r22	; 0x05
		STD_ERROR LOC_ERROR =OK;
    1afc:	1b 82       	std	Y+3, r1	; 0x03

		u8 volatile*REG=DDRD;
    1afe:	81 e3       	ldi	r24, 0x31	; 49
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01

					if (PORT_ >PORT_D && PORT_ < PORT_A)
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
    1b08:	88 23       	and	r24, r24
    1b0a:	99 f0       	breq	.+38     	; 0x1b32 <DIO_STDSetPortDir+0x48>
    1b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	80 f4       	brcc	.+32     	; 0x1b32 <DIO_STDSetPortDir+0x48>
					{
						REG=DDRD+(DIO_REG_OFSET*PORT_);
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	c9 01       	movw	r24, r18
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	82 0f       	add	r24, r18
    1b20:	93 1f       	adc	r25, r19
    1b22:	c1 96       	adiw	r24, 0x31	; 49
    1b24:	9a 83       	std	Y+2, r25	; 0x02
    1b26:	89 83       	std	Y+1, r24	; 0x01
						*REG=DIO_DIR_;
    1b28:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2e:	80 83       	st	Z, r24
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_STDSetPortDir+0x4c>
					}
					else
					{
						LOC_ERROR=NOT_OK;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	8b 83       	std	Y+3, r24	; 0x03

					}


		return(LOC_ERROR);
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	cf 91       	pop	r28
    1b44:	df 91       	pop	r29
    1b46:	08 95       	ret

00001b48 <DIO_STDGetPinValue>:

	STD_ERROR  DIO_STDGetPinValue(u8 PORT_, u8 P_,u8 * Pin_Value )
	{
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
    1b50:	27 97       	sbiw	r28, 0x07	; 7
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	8c 83       	std	Y+4, r24	; 0x04
    1b5e:	6d 83       	std	Y+5, r22	; 0x05
    1b60:	5f 83       	std	Y+7, r21	; 0x07
    1b62:	4e 83       	std	Y+6, r20	; 0x06
		STD_ERROR LOC_ERROR=OK;
    1b64:	1b 82       	std	Y+3, r1	; 0x03
		u8 volatile* REG =PIND;
    1b66:	80 e3       	ldi	r24, 0x30	; 48
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01

		if(P_>7||P_<0)
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	88 30       	cpi	r24, 0x08	; 8
    1b72:	18 f0       	brcs	.+6      	; 0x1b7a <DIO_STDGetPinValue+0x32>
		{
			LOC_ERROR=NOT_OK;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	8b 83       	std	Y+3, r24	; 0x03
    1b78:	39 c0       	rjmp	.+114    	; 0x1bec <DIO_STDGetPinValue+0xa4>
		}
		else if (P_<=0 && P_>=7)
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	88 23       	and	r24, r24
    1b7e:	b1 f5       	brne	.+108    	; 0x1bec <DIO_STDGetPinValue+0xa4>
    1b80:	8d 81       	ldd	r24, Y+5	; 0x05
    1b82:	87 30       	cpi	r24, 0x07	; 7
    1b84:	98 f1       	brcs	.+102    	; 0x1bec <DIO_STDGetPinValue+0xa4>
		{
			if (PORT_ > PORT_A || PORT_< PORT_D )
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	84 30       	cpi	r24, 0x04	; 4
    1b8a:	18 f0       	brcs	.+6      	; 0x1b92 <DIO_STDGetPinValue+0x4a>
			{
				LOC_ERROR=NOT_OK;
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	8b 83       	std	Y+3, r24	; 0x03
    1b90:	2d c0       	rjmp	.+90     	; 0x1bec <DIO_STDGetPinValue+0xa4>

			}
			else if(PORT_ <= PORT_A  &&  PORT_ >= PORT_D )
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	84 30       	cpi	r24, 0x04	; 4
    1b96:	50 f5       	brcc	.+84     	; 0x1bec <DIO_STDGetPinValue+0xa4>
			{
				REG = PIND+(DIO_REG_OFSET*P_);
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	c9 01       	movw	r24, r18
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	82 0f       	add	r24, r18
    1ba6:	93 1f       	adc	r25, r19
    1ba8:	c0 96       	adiw	r24, 0x30	; 48
    1baa:	9a 83       	std	Y+2, r25	; 0x02
    1bac:	89 83       	std	Y+1, r24	; 0x01
				*Pin_Value=(* (REG) &(1<<P_))>>(P_);
    1bae:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb2:	80 81       	ld	r24, Z
    1bb4:	48 2f       	mov	r20, r24
    1bb6:	50 e0       	ldi	r21, 0x00	; 0
    1bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_STDGetPinValue+0x80>
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	2a 95       	dec	r18
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_STDGetPinValue+0x7c>
    1bcc:	9a 01       	movw	r18, r20
    1bce:	28 23       	and	r18, r24
    1bd0:	39 23       	and	r19, r25
    1bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd4:	88 2f       	mov	r24, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a9 01       	movw	r20, r18
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <DIO_STDGetPinValue+0x98>
    1bdc:	55 95       	asr	r21
    1bde:	47 95       	ror	r20
    1be0:	8a 95       	dec	r24
    1be2:	e2 f7       	brpl	.-8      	; 0x1bdc <DIO_STDGetPinValue+0x94>
    1be4:	ca 01       	movw	r24, r20
    1be6:	ee 81       	ldd	r30, Y+6	; 0x06
    1be8:	ff 81       	ldd	r31, Y+7	; 0x07
    1bea:	80 83       	st	Z, r24
			}



		}
		return(LOC_ERROR);
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    1bee:	27 96       	adiw	r28, 0x07	; 7
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	cf 91       	pop	r28
    1bfc:	df 91       	pop	r29
    1bfe:	08 95       	ret

00001c00 <main>:
	#include <util/delay.h>

	#undef F_CPU
	#define F_CPU   16000000
	void main (void)
	{
    1c00:	df 93       	push	r29
    1c02:	cf 93       	push	r28
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	68 97       	sbiw	r28, 0x18	; 24
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
//		u8 app_entry[10]="ADC_READ";
//		u8 ADC_Digital;
//		u16 ADC_AnalogVolt=0;
//		u8 ADC_analogStr[5]={0};
			u8 arr[10]={0};
    1c14:	8a e0       	ldi	r24, 0x0A	; 10
    1c16:	fe 01       	movw	r30, r28
    1c18:	3f 96       	adiw	r30, 0x0f	; 15
    1c1a:	df 01       	movw	r26, r30
    1c1c:	98 2f       	mov	r25, r24
    1c1e:	1d 92       	st	X+, r1
    1c20:	9a 95       	dec	r25
    1c22:	e9 f7       	brne	.-6      	; 0x1c1e <main+0x1e>
//			 _delay_ms(1000);
//			  LCD_voidClearScreen();



	 LCD_VoidInttoString(400000,arr);
    1c24:	9e 01       	movw	r18, r28
    1c26:	21 5f       	subi	r18, 0xF1	; 241
    1c28:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2a:	60 e8       	ldi	r22, 0x80	; 128
    1c2c:	7a e1       	ldi	r23, 0x1A	; 26
    1c2e:	86 e0       	ldi	r24, 0x06	; 6
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a9 01       	movw	r20, r18
    1c34:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <LCD_VoidInttoString>
	 LCD_voidWriteString(arr,0);
    1c38:	ce 01       	movw	r24, r28
    1c3a:	0f 96       	adiw	r24, 0x0f	; 15
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	0e 94 42 0a 	call	0x1484	; 0x1484 <LCD_voidWriteString>
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	aa ef       	ldi	r26, 0xFA	; 250
    1c48:	b3 e4       	ldi	r27, 0x43	; 67
    1c4a:	8b 87       	std	Y+11, r24	; 0x0b
    1c4c:	9c 87       	std	Y+12, r25	; 0x0c
    1c4e:	ad 87       	std	Y+13, r26	; 0x0d
    1c50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a e7       	ldi	r20, 0x7A	; 122
    1c60:	55 e4       	ldi	r21, 0x45	; 69
    1c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8f 83       	std	Y+7, r24	; 0x07
    1c6c:	98 87       	std	Y+8, r25	; 0x08
    1c6e:	a9 87       	std	Y+9, r26	; 0x09
    1c70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c72:	6f 81       	ldd	r22, Y+7	; 0x07
    1c74:	78 85       	ldd	r23, Y+8	; 0x08
    1c76:	89 85       	ldd	r24, Y+9	; 0x09
    1c78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <main+0x94>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
    1c92:	3f c0       	rjmp	.+126    	; 0x1d12 <main+0x112>
	else if (__tmp > 65535)
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ca0:	4f e7       	ldi	r20, 0x7F	; 127
    1ca2:	57 e4       	ldi	r21, 0x47	; 71
    1ca4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ca8:	18 16       	cp	r1, r24
    1caa:	4c f5       	brge	.+82     	; 0x1cfe <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	40 e2       	ldi	r20, 0x20	; 32
    1cba:	51 e4       	ldi	r21, 0x41	; 65
    1cbc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	bc 01       	movw	r22, r24
    1cc6:	cd 01       	movw	r24, r26
    1cc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	0f c0       	rjmp	.+30     	; 0x1cf4 <main+0xf4>
    1cd6:	80 e9       	ldi	r24, 0x90	; 144
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	9c 83       	std	Y+4, r25	; 0x04
    1cdc:	8b 83       	std	Y+3, r24	; 0x03
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ce2:	01 97       	sbiw	r24, 0x01	; 1
    1ce4:	f1 f7       	brne	.-4      	; 0x1ce2 <main+0xe2>
    1ce6:	9c 83       	std	Y+4, r25	; 0x04
    1ce8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	9e 81       	ldd	r25, Y+6	; 0x06
    1cee:	01 97       	sbiw	r24, 0x01	; 1
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	69 f7       	brne	.-38     	; 0x1cd6 <main+0xd6>
    1cfc:	14 c0       	rjmp	.+40     	; 0x1d26 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1d00:	78 85       	ldd	r23, Y+8	; 0x08
    1d02:	89 85       	ldd	r24, Y+9	; 0x09
    1d04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	9a 83       	std	Y+2, r25	; 0x02
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	f1 f7       	brne	.-4      	; 0x1d1e <main+0x11e>
    1d22:	9a 83       	std	Y+2, r25	; 0x02
    1d24:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(500);
			 LCD_voidClearScreen();
    1d26:	0e 94 33 09 	call	0x1266	; 0x1266 <LCD_voidClearScreen>
    1d2a:	7c cf       	rjmp	.-264    	; 0x1c24 <main+0x24>

00001d2c <__mulsi3>:
    1d2c:	62 9f       	mul	r22, r18
    1d2e:	d0 01       	movw	r26, r0
    1d30:	73 9f       	mul	r23, r19
    1d32:	f0 01       	movw	r30, r0
    1d34:	82 9f       	mul	r24, r18
    1d36:	e0 0d       	add	r30, r0
    1d38:	f1 1d       	adc	r31, r1
    1d3a:	64 9f       	mul	r22, r20
    1d3c:	e0 0d       	add	r30, r0
    1d3e:	f1 1d       	adc	r31, r1
    1d40:	92 9f       	mul	r25, r18
    1d42:	f0 0d       	add	r31, r0
    1d44:	83 9f       	mul	r24, r19
    1d46:	f0 0d       	add	r31, r0
    1d48:	74 9f       	mul	r23, r20
    1d4a:	f0 0d       	add	r31, r0
    1d4c:	65 9f       	mul	r22, r21
    1d4e:	f0 0d       	add	r31, r0
    1d50:	99 27       	eor	r25, r25
    1d52:	72 9f       	mul	r23, r18
    1d54:	b0 0d       	add	r27, r0
    1d56:	e1 1d       	adc	r30, r1
    1d58:	f9 1f       	adc	r31, r25
    1d5a:	63 9f       	mul	r22, r19
    1d5c:	b0 0d       	add	r27, r0
    1d5e:	e1 1d       	adc	r30, r1
    1d60:	f9 1f       	adc	r31, r25
    1d62:	bd 01       	movw	r22, r26
    1d64:	cf 01       	movw	r24, r30
    1d66:	11 24       	eor	r1, r1
    1d68:	08 95       	ret

00001d6a <__udivmodsi4>:
    1d6a:	a1 e2       	ldi	r26, 0x21	; 33
    1d6c:	1a 2e       	mov	r1, r26
    1d6e:	aa 1b       	sub	r26, r26
    1d70:	bb 1b       	sub	r27, r27
    1d72:	fd 01       	movw	r30, r26
    1d74:	0d c0       	rjmp	.+26     	; 0x1d90 <__udivmodsi4_ep>

00001d76 <__udivmodsi4_loop>:
    1d76:	aa 1f       	adc	r26, r26
    1d78:	bb 1f       	adc	r27, r27
    1d7a:	ee 1f       	adc	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	a2 17       	cp	r26, r18
    1d80:	b3 07       	cpc	r27, r19
    1d82:	e4 07       	cpc	r30, r20
    1d84:	f5 07       	cpc	r31, r21
    1d86:	20 f0       	brcs	.+8      	; 0x1d90 <__udivmodsi4_ep>
    1d88:	a2 1b       	sub	r26, r18
    1d8a:	b3 0b       	sbc	r27, r19
    1d8c:	e4 0b       	sbc	r30, r20
    1d8e:	f5 0b       	sbc	r31, r21

00001d90 <__udivmodsi4_ep>:
    1d90:	66 1f       	adc	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	88 1f       	adc	r24, r24
    1d96:	99 1f       	adc	r25, r25
    1d98:	1a 94       	dec	r1
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <__udivmodsi4_loop>
    1d9c:	60 95       	com	r22
    1d9e:	70 95       	com	r23
    1da0:	80 95       	com	r24
    1da2:	90 95       	com	r25
    1da4:	9b 01       	movw	r18, r22
    1da6:	ac 01       	movw	r20, r24
    1da8:	bd 01       	movw	r22, r26
    1daa:	cf 01       	movw	r24, r30
    1dac:	08 95       	ret

00001dae <__prologue_saves__>:
    1dae:	2f 92       	push	r2
    1db0:	3f 92       	push	r3
    1db2:	4f 92       	push	r4
    1db4:	5f 92       	push	r5
    1db6:	6f 92       	push	r6
    1db8:	7f 92       	push	r7
    1dba:	8f 92       	push	r8
    1dbc:	9f 92       	push	r9
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	df 92       	push	r13
    1dc6:	ef 92       	push	r14
    1dc8:	ff 92       	push	r15
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
    1dd6:	ca 1b       	sub	r28, r26
    1dd8:	db 0b       	sbc	r29, r27
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
    1de4:	09 94       	ijmp

00001de6 <__epilogue_restores__>:
    1de6:	2a 88       	ldd	r2, Y+18	; 0x12
    1de8:	39 88       	ldd	r3, Y+17	; 0x11
    1dea:	48 88       	ldd	r4, Y+16	; 0x10
    1dec:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dee:	6e 84       	ldd	r6, Y+14	; 0x0e
    1df0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1df2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1df4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1df6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1df8:	b9 84       	ldd	r11, Y+9	; 0x09
    1dfa:	c8 84       	ldd	r12, Y+8	; 0x08
    1dfc:	df 80       	ldd	r13, Y+7	; 0x07
    1dfe:	ee 80       	ldd	r14, Y+6	; 0x06
    1e00:	fd 80       	ldd	r15, Y+5	; 0x05
    1e02:	0c 81       	ldd	r16, Y+4	; 0x04
    1e04:	1b 81       	ldd	r17, Y+3	; 0x03
    1e06:	aa 81       	ldd	r26, Y+2	; 0x02
    1e08:	b9 81       	ldd	r27, Y+1	; 0x01
    1e0a:	ce 0f       	add	r28, r30
    1e0c:	d1 1d       	adc	r29, r1
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	ed 01       	movw	r28, r26
    1e1a:	08 95       	ret

00001e1c <_exit>:
    1e1c:	f8 94       	cli

00001e1e <__stop_program>:
    1e1e:	ff cf       	rjmp	.-2      	; 0x1e1e <__stop_program>
